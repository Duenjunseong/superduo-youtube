"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from decouple import config, Csv
import dj_database_url
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default="django-insecure-7&&#z#_fyx26(a3c_x0@2^blm69tc321x1(vl9!r*5&68$i*xo")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # 서드파티 앱
    "guardian",
    "widget_tweaks",
    "taggit",
    
    # 사용자 정의 앱
    "core.apps.CoreConfig",
    "users.apps.UsersConfig",
    "downloads.apps.DownloadsConfig",
    "video_processor",
    "workspace",
    "youtube_trending",
]

if DEBUG:
    INSTALLED_APPS += [
        'django_extensions',
    ]

    
    

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # 정적 파일 서빙을 위해 추가
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# 기본 SQLite 설정 (개발용)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# 프로덕션 환경에서는 DATABASE_URL로 PostgreSQL 사용
DATABASE_URL = config('DATABASE_URL', default=None)
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL)


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# STATICFILES_DIRS 조건부 설정 (디렉토리가 존재할 때만)
STATICFILES_DIRS = []
if (BASE_DIR / "static").exists() and any((BASE_DIR / "static").iterdir()):
    STATICFILES_DIRS.append(BASE_DIR / "static")

STATIC_ROOT = config('STATIC_ROOT', default=str(BASE_DIR / "staticfiles"))

# WhiteNoise 설정 (정적 파일 압축)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
# Docker 환경과 로컬 환경 모두 지원
MEDIA_ROOT = config('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'data', 'media'))

if DEBUG:
    USE_X_ACCEL_REDIRECT=False
else:
    USE_X_ACCEL_REDIRECT=True

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 커스텀 사용자 모델
AUTH_USER_MODEL = 'users.User'

# django-guardian 설정
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # 기본 인증 백엔드
    'guardian.backends.ObjectPermissionBackend', # 객체 수준 권한 백엔드
)

# Anonymous user 설정 (선택적)
ANONYMOUS_USER_NAME = None

# 로그인/로그아웃 리디렉션 URL
LOGIN_REDIRECT_URL = 'core:dashboard'
LOGOUT_REDIRECT_URL = 'core:dashboard'
LOGIN_URL = 'users:login'

# Celery 설정
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Seoul'

# 메시지 프레임워크 설정
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# 로깅 설정
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': config('LOG_LEVEL', default='INFO'),
            'class': 'logging.FileHandler',
            'filename': config('LOG_FILE', default=str(BASE_DIR / 'logs' / 'django.log')),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': config('LOG_LEVEL', default='INFO'),
            'propagate': False,
        },
        'downloads': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'level': 'INFO',
            'handlers': [],
            'propagate': False,
        },
    },
}

# 보안 설정 (프로덕션)
if not DEBUG:
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool)
    SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=False, cast=bool)
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'

# CSRF 설정 (JavaScript에서 접근 가능하도록)
CSRF_USE_SESSIONS = False  # 쿠키 사용
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_HTTPONLY = False  # JavaScript에서 접근 가능하도록
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_TRUSTED_ORIGINS = []

# 파일 업로드 설정
FILE_UPLOAD_MAX_MEMORY_SIZE = 5000 * 1024 * 1024  # 5000MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5000 * 1024 * 1024

# 파일 다운로드 설정
FILE_DOWNLOAD_CHUNK_SIZE = 8192  # 8KB
FILE_DOWNLOAD_TIMEOUT = 300  # 5분

# SQLite OverflowError 방지 설정
# DEBUG 모드에서 쿼리 로깅으로 인한 OverflowError를 방지
if DEBUG:
    # Django의 쿼리 로깅 비활성화
    LOGGING['loggers']['django.db.backends'] = {
        'level': 'INFO',
        'handlers': [],
        'propagate': False,
    }
    # connection.queries 저장 비활성화 (메모리 절약 + OverflowError 방지)
    import logging
    logging.getLogger('django.db.backends').setLevel(logging.WARNING)
    
    # Django 내부 설정으로 쿼리 로깅 완전 비활성화
    import os
    os.environ['DJANGO_LOG_LEVEL'] = 'WARNING'
    
    # SQLite 쿼리 로깅 완전 비활성화
    DATABASES['default']['OPTIONS'] = {
        'init_command': "PRAGMA journal_mode=WAL;",
    }

# SQLite에서 완전히 쿼리 로깅 비활성화 (OverflowError 방지)
import sys
if 'runserver' in sys.argv or 'shell' in sys.argv:
    # 개발 환경에서만 적용
    LOGGING['disable_existing_loggers'] = True
    LOGGING['loggers']['django.db.backends.schema'] = {
        'level': 'CRITICAL',
        'handlers': [],
        'propagate': False,
    }

# YouTube API 설정
YOUTUBE_API_KEY = config('YOUTUBE_API_KEY', default='')
YOUTUBE_API_SERVICE_NAME = 'youtube'
YOUTUBE_API_VERSION = 'v3'

# YouTube 트렌딩 설정
YOUTUBE_TRENDING_REGION = 'KR'  # 대한민국
YOUTUBE_TRENDING_MAX_RESULTS = 50  # 최대 수집할 영상 수
YOUTUBE_TRENDING_CATEGORIES = {
    '10': 'music',
    '20': 'gaming', 
    '24': 'entertainment',
    '17': 'sports',
    '25': 'news',
    '27': 'education',
    '28': 'tech',
    '23': 'comedy',
    '26': 'lifestyle',
}

# Celery Beat 스케줄에 YouTube 트렌딩 수집 작업 추가
if 'CELERY_BEAT_SCHEDULE' not in locals():
    CELERY_BEAT_SCHEDULE = {}

# 매일 오후 11시 55분에 YouTube 트렌딩 쇼츠 수집
CELERY_BEAT_SCHEDULE['youtube_trending_collection'] = {
    'task': 'youtube_trending.tasks.collect_trending_shorts_only',
    'schedule': crontab(hour=23, minute=55),  # 매일 23:55
    'options': {'queue': 'default'},
}
